// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
	field Array str;
	field int length;
	field int maxLength;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		let str = Array.new(maxLength+1);
		let length = 0;
		let maxLength = maxLength+1;
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
		do Array.dispose(str);
		return;
    }

    /** Returns the current length of this string. */
    method int length() {
		return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		let str[j] = c;
		return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		//var Array tmp;
		//var int index;
		//if(length < maxLength){
			let str[length] = c;
			let length = length + 1;
		/*} /*else {
			let tmp = Array.new((maxLength*2)+1);
			let index = 0;
			while(index < maxLength){
				let tmp[index] = str[index];	
				let index = index + 1;		
			}
			do Array.dispose(str); //??
			let str = tmp;
		}*/

		return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
		let length = length - 1;
		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
		var int val;
		var int index;
		var int d;
		var boolean positive;
		let positive = true;
		let val = 0;
		let index = 0;
		if(str[0] = 45){
			let index = 1;
			let positive = false;
		}
		while(index < length){
			let d = str[index]-48;
			let val = (val*10)+d;
			let index = index + 1;
		}
		if(~positive){
			let val = -val;
		}
		return val;
    }

/** helper method for setInt method */
	method void setIntHelper(int val){
		var int lastDigit;
		var int c;
		let lastDigit = val-((val/10)*10); //var % 10
		let c = lastDigit + 48;
		if(val < 10){
			do appendChar(c);
		} else {
			do setIntHelper(val/10);
			do appendChar(c);
		}
		return;
	}

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
		let length = 0;
		if(val<0){
			let val = -val;
			do appendChar(45);
		}
		do setIntHelper(val);
		return;
    }

    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
