// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
	static Array scr;
	static Array twoToThe;
	static int scrLen;
	static boolean curColor;
    /** Initializes the Screen. */
    function void init() {
		let scr = 16384;
		let scrLen = 8192;
		let curColor = true;
		do Screen.clearScreen();
		let twoToThe = Array.new(16);
		let twoToThe[0]=1;
		let twoToThe[1]=2;
		let twoToThe[2]=4;
		let twoToThe[3]=8;
		let twoToThe[4]=16;
		let twoToThe[5]=32;
		let twoToThe[6]=64;
		let twoToThe[7]=128;
		let twoToThe[8]=256;
		let twoToThe[9]=512;
		let twoToThe[10]=1024;
		let twoToThe[11]=2048;
		let twoToThe[12]=4096;
		let twoToThe[13]=8192;
		let twoToThe[14]=16384;
		let twoToThe[15]=twoToThe[14] + twoToThe[14];
		return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
		var int i;
		let i = 0;
		while(i<scrLen){
			let scr[i] = false;
			let i=i+1;
		}
		return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
		let curColor = b;
		return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
		var int addr;
		var int val;
		var int mod;
		let addr = (32*y)+(x/16);
		let mod = x-((x/16)*16);
		let val = scr[addr] | twoToThe[mod];
		
		if(curColor){
			let val = scr[addr] | twoToThe[mod];
		} //black
		else{
			let val = scr[addr] & ~(twoToThe[mod]);
		} //white
		let scr[addr] = val;
		return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
		var int counter;
		var int dx;
		var int dy;
		var int c1;
		var int c2;
		var int diff;
		if(x1>x2){//let's swap
			let dx = y1;
			let y1 = y2;
			let y2 = dx;
			let dx = x1;
			let x1 = x2;
			let x2 = dx;
		}
		let counter = 0;
		let dx = x2 - x1;
		let dy = y2 - y1;//could be <0
		if(dy<0){let dy=-1*dy;}
		if(dx=0){//vertical easy case
			while(counter < dy){
				if(y2>y1){
					do Screen.drawPixel(x2,y1+counter);
				} else {
					do Screen.drawPixel(x2,y2+counter);
				}
				let counter = counter + 1;
			}
		} else {
			if(dy=0){//horizontal easy case
				while(counter < dx){
					do Screen.drawPixel(x1+counter,y1);
					let counter = counter + 1;
				}
			} else {//diagonal
				let diff = 0;
				let c1 = 0;
				let c2 = 0;
				if(y1>y2){
					while(~(c1 > dx) & ~(c2 > dy)){
						do Screen.drawPixel(x1+c1,y1-c2);
						if(diff < 0){
							let c1 = c1 + 1;
							let diff = diff + dy;
						} else {
							let c2 = c2 + 1;
							let diff = diff - dx;
						}
					}
				} else {
					while(~(c1 > dx) & ~(c2 > dy)){
						do Screen.drawPixel(x1+c1,y1+c2);
						if(diff < 0){
							let c1 = c1 + 1;
							let diff = diff + dy;
						} else {
							let c2 = c2 + 1;
							let diff = diff - dx;
						}	
					}
				}
				/*while(dx > 0 | dy > 0){
					if(dx > dy) { // move right
						do Screen.drawPixel(x1+1,y1);
						let x1 =  x1 + 1;
						let dx = dx - 1;
					} else { // move up/down
						if(y1<y2){
							do Screen.drawPixel(x1,y1+1);
							let y1 = y1 + 1;
						} else {
							do Screen.drawPixel(x1,y1-1);
							let y1 = y1 - 1;
						}
						let dy = dy - 1;
					}
				}*/
			}	
		}
		return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		while(~(x1 = x2)){
			do Screen.drawLine(x1,y1,x1,y2);
			let x1 = x1 + 1;
		}
		do Screen.drawLine(x1,y1,x1,y2);
		return;    
	}

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
		var int dy;
		var int rsq;
		var int dysq;
		var int tmpy;
		var int suby;

		let rsq = Math.multiply(r,r);
		let tmpy = y;
		let suby = 0;
		//up r
		let dy = 0;
		while(dy < r){
			let dysq = Math.multiply(dy,dy);
			do Screen.drawLine(x - Math.sqrt(rsq - dysq), y - suby, x + Math.sqrt(rsq - dysq), y - suby);
			let suby = suby + 1;
			let dy = dy + 1;
		}
		//down r
		let y = tmpy;
		let dy = 0;
		let suby = 0;
		while(dy < r){
			let dysq = Math.multiply(dy,dy);
			do Screen.drawLine(x - Math.sqrt(rsq - dysq), y + suby, x + Math.sqrt(rsq - dysq), y + suby);
			let suby = suby + 1;
			let dy = dy + 1;
		}
		return;
    }
}
