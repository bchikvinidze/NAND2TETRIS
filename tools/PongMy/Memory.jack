// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 

class Memory {
	static Array ram;
	static Array heap;
	static Array block;
	static int next;

    /** Initializes the class. */
    function void init() {
		let ram = 0;
		let heap = 2048;
		let block = heap;
		let block[0] = null;
		let block[1] = 14334;
		return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		let ram[address] = value;
		return;
    }

	//address of first fit
    function int firstFit(int size){
		var int result;
		var Array next;

		let result = -1;
		let next = block;
		while(result = -1){ // while no free segment found yet,
			if(next[0] = null){ //end reached
				if(~(next[1] < (size + 2))){ 
					let result = next + next[1] + 2 - size; 
					let next[1] = next[1] - size - 2;//decrease last length
					return result;
				} else { // cant allocate more memory
					return -1; 
				}
			} else {
				if(~(next[1] < (size + 2))){ //already found
					let result = next + next[1] + 2 - size; 
					let next[1] = next[1] - size - 2;//decrease last length
					return result;
				} else { //try next available spot
					let next = next[0];
				}
			}			
		}
		return result;
	}

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
		var int address;
		var Array result;

		let address = Memory.firstFit(size+2);
		if(~(address = -1)){
			let result = address;
			let result[-2] = -31416;
			let result[-1] = size; 
		}
		return address;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
		var Array tmp;
		let tmp = block[0];
		let block[0] = o[-2];
		let o[-2] = tmp;
		return;
    }    
}
